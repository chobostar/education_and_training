#### Основные понятия

типы файлов:
- обычный файл ;
- каталог ;
- канал ;
- символьный специальный файл ;
- блочный специальный файл ;
- символьная ссылка ;
- сокет.

Канал можно представлять себе в виде транспортера, с одной стороны которого находится поставщик (процесс, пишущий в канал ), а с другой - потребитель (процесс, читающий из канала ). Данные читаются в том же порядке, в каком производилась запись, т. е. с точки зрения структур данных канал - это очередь.

Специальные файлы соответствуют аппаратным компонентам компьютера. Обычно при использовании символьных специальных файлов остаются видимыми аппаратные характеристики соответствующих устройств, а при доступе к устройствам посредством блочных специальных файлов аппаратные характеристики, как правило, остаются скрытыми. Типичный пример устройства, которому соответствует символьный специальный файл, - терминал.

Выполнение большинства операций с файлами требует их открытия. Открытому файлу соответствует файловый дескриптор - неотрицательное целое число, уникальное в пределах процесса и используемое для целей доступа к файлу. Дескриптор является ссылкой на описание открытого файла, хранящее смещение в файле, его статус, режимы доступа . Разные дескрипторы могут ссылаться на одно описание.

#### Получение информации о файлах и файловых системах

Первый символ в строках `ls` задает тип файла:
d - каталог ;
b - блочный специальный файл ;
c - символьный специальный файл ;
l - символьная ссылка ;
p - канал ;
- (минус) - обычный файл.

В связи с тем, что жёсткие ссылки ссылаются на индексный дескриптор, уникальный в пределах дискового раздела, создание жёсткой ссылки на файл в каталоге другого раздела невозможно. Для преодоления этого ограничения используются символьные (символические) ссылки.

du  [опция ...] [файл ...]
Файлы, на которые есть несколько жестких ссылок, учитываются только один раз.

stat

#### Изменение атрибутов файлов и текущей позиции в файловой иерархии

cd, $OLDPWD, $PWD, chown, chmod, touch

#### Создание, удаление, копирование и перемещение файлов

C function:
int creat (const char *path, mode_t mode);
оставляет файл открытым

mkdir - не оставляет каталог открытым

mkfifo  [-m режим_доступа] канал ...

ln
исходные и целевой файлы обязаны принадлежать одной файловой системе и создать новую жесткую ссылку на каталог или символьную ссылку нельзя

rm, rmdir
удаляют не файлы, а указанные ссылки на них, содержащиеся в каталогах - маршрутных префиксах, и, соответственно, уменьшают на единицу число жестких ссылок на эти файлы. файл удаляется и занятое им пространство освобождается, только если других ссылок на него не остается
удаляет символьные ссылки, а не указуемые файлы.

cp, mv
mv- реальное копирование может потребоваться только при перемещении файлов между файловыми системам

#### Обход и обработка файловых иерархий

find
pax