### Процессы

Процесс – это адресное пространство вместе с выполняемыми в нем потоками управления, а также системными ресурсами, которые этим потокам требуются.

идентификатор процесса – положительное целое число, однозначно идентифицирующее процесс в течение времени его жизни.

Время жизни процесса – это период от его создания до возврата идентификатора операционной системе.

Зомби-процесс – завершившийся процесс, подлежащий ликвидации после того, как код его завершения будет передан ожидающему этого другому процессу.

Группа – совокупность процессов, допускающая согласованную доставку сигналов. У каждой группы имеется уникальный положительный целочисленный идентификатор, представляющий ее в течение времени ее жизни. В такой роли выступает идентификатор процесса, именуемого лидером группы.

Временем жизни группы процессов называют период от создания группы до момента, когда ее покидает последний процесс (по причине завершения или смены группы).

Задание – это набор процессов, составляющих конвейер, а также порожденных ими процессов, входящих в одну группу.

управлением заданиями подразумеваются предоставленные пользователям средства выборочно (при)останавливать и затем продолжать (возобновлять) выполнение процессов. На отдельные задания ссылаются с помощью идентификаторов.

Сеансом называется множество групп процессов, сформированное для целей управления заданиями

Лидер сеанса – процесс, создавший данный сеанс.

Управляющим терминалом называется терминал, ассоциированный с сеансом. У сеанса может быть не более одного управляющего терминала, а тот, в свою очередь, ассоциируется ровно с одним сеансом

Управляющий процесс – это лидер сеанса, установивший соединение с управляющим терминалом

Атрибуты процесса разделяются между потоками. К числу индивидуальных атрибутов относятся идентификатор, приоритет и политика планирования, значение переменной errno, ассоциированные с потоком управления пары ключ/значение, а также системные ресурсы, требующиеся для поддержки потока управления.

Всем потокам управления одного процесса доступны все объекты, адреса которых могут быть определены потоком.

Динамическое распределение памяти — способ выделения оперативной памяти компьютера для объектов в программе, при котором выделение памяти под объект осуществляется во время выполнения программы.

При динамическом распределении памяти объекты размещаются в т. н. «куче» (англ. heap): при конструировании объекта указывается размер запрашиваемой под объект памяти, и, в случае успеха, выделенная область памяти, условно говоря, «изымается» из «кучи», становясь недоступной при последующих операциях выделения памяти. Противоположная по смыслу операция — освобождение занятой ранее под какой-либо объект памяти: освобождаемая память, также условно говоря, возвращается в «кучу» и становится доступной при дальнейших операциях выделения памяти.

#### Опрос и изменение атрибутов процессов

ps, umask

#### Создание и завершение процессов

pid_t fork (void);

Новый (порожденный) процесс является точной копией процесса, вызвавшего fork() (родительского), за исключением следующих моментов.

1. У порожденного процесса свой идентификатор, равно как и идентификатор родительского процесса.
2. У порожденного процесса собственная копия файловых дескрипторов, ссылающихся на те же описания открытых файлов, что и соответствующие дескрипторы родительского процесса.
3. Порожденный процесс не наследует блокировки файлов, установленные родительским процессом.
4. Порожденный процесс создается с одним потоком управления – копией того, что вызвал fork().
5. Имеются также некоторые тонкости, связанные с обработкой сигналов, на которых мы, однако, останавливаться не будем.

Процесс-потомок при помощи функции семейства exec() подменяет программу, которая определяет поведение процесса. Следующие атрибуты процесса остаются неизменными:
- идентификатор процесса;
- идентификатор родительского процесса;
- идентификатор группы процессов;
- членство в сеансе;
- реальные идентификаторы пользователя и группы процесса;
- идентификаторы дополнительных групп;
- текущий и корневой каталоги;
- маска режима создания файлов;
- атрибуты, связанные с обработкой сигналов.

Родительский процесс реализует ожидание завершения процессов-потомков и получает информацию о его (завершения) статусе с помощью функций семейства wait()

Если запрос статуса порожденного процесса завершился успешно, функции wait() и waitpid() возвращают идентификатор этого процесса и размещают по указателю stat_loc (если он отличен от NULL ) значение, которое будет нулевым тогда и только тогда, когда выдан статус порожденного процесса, завершившегося по одной из трех причин:
- произошел возврат из функции main с нулевым результатом;
- порожденный процесс вызвал функцию _exit() или exit() с нулевым аргументом;
- завершились все потоки управления порожденного процесса.

Если у завершающегося процесса были потомки, родительским для них становится системный процесс, определяемый реализацией.

kill -s TERM
kill -s KILL